<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scope on Sam Sahara</title>
    <link>https://ThornDuke.github.io/tags/scope/</link>
    <description>Recent content in scope on Sam Sahara</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it</language>
    <lastBuildDate>Sun, 05 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ThornDuke.github.io/tags/scope/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hoisting</title>
      <link>https://ThornDuke.github.io/posts/211205-hoisting/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ThornDuke.github.io/posts/211205-hoisting/</guid>
      <description>Ogni variabile o dichiarazione di funzione ha un proprio ambito di visibilità e utilizzabilità (scope). Ma all’interno di uno scope una data variabile o funzione è visibile e accessibile anche prima della sua formale dichiarazione. E’ il meccanismo dello hoisting.
Cosa è To hoist in inglese significa sollevare qualcosa di pesante, a volte con appositi strumenti o corde; issare. In JavaScript è il meccanismo con il quale il compilatore (durante la fase del parsing) raccoglie tutte le dichiarazioni di funzione e di variabile trovate in uno scope e le sposta all’inizio dello scope stesso, in modo da poterle usare per tutti i riferimenti e le assegnazioni successive.</description>
    </item>
    
    <item>
      <title>Il Lexical Scope</title>
      <link>https://ThornDuke.github.io/posts/211114-lexicalscope/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ThornDuke.github.io/posts/211114-lexicalscope/</guid>
      <description>JavaScript usa un particolare modello per gestire l&amp;rsquo;accesso alle variabili, chiamato lexical scope. È proprio il lexical scope che consente al motore JavaScript di distinguere tra variabili diverse ma con lo stesso nome, riconoscere variabili all&amp;rsquo;interno di funzioni o di cicli for, accedere a variabili globali dall&amp;rsquo;interno di una funzione o di un blocco.
Vediamo come funziona.
Il compilatore JavaScript JavaScript è un linguaggio compilato. Prima della esecuzione il codice passa per una fase di vera e propria compilazione, suddivisa in tre sotto-fasi:</description>
    </item>
    
    <item>
      <title>Cosa è &#34;this&#34; in una funzione JavaScript?</title>
      <link>https://ThornDuke.github.io/posts/211107-this/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ThornDuke.github.io/posts/211107-this/</guid>
      <description>Il problema Uno dei concetti più ripetuti e più accettati tra i programmatori JavaScript è che this è un costrutto difficile da capire, quasi esoterico. E in effetti i malintesi diffusi su questo argomento sono tanti: che this, chiamato all&amp;rsquo;interno di funzione, si riferisca alla funzione stessa, oppure che si riferisca alla istanza cui la funzione-metodo appartiene.
Cerchiamo di capirci qualcosa in più.
L&amp;rsquo;ambito e il contesto L&#39;ambito di una funzione JavaScript (lo scope) è, da un punto di vista esteriore, tutto quello che c&amp;rsquo;è tra una parentesi graffa aperta e una chiusa.</description>
    </item>
    
  </channel>
</rss>
